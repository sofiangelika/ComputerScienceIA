package com.company;
///////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Garmin International, Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2022 Garmin International, Inc.
///////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.84Release
// Tag = production/akw/21.84.00-0-g894a113c
///////////////////////////////////////////////////////////////////////////////////

import com.garmin.fit.*;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PrintStream;

public class AccessFile {
    AccessFile(String fileName) {
        Decode decode = new Decode();
        //decode.skipHeader();        // Use on streams with no header and footer (stream contains FIT defn and data messages only)
        //decode.incompleteStream();  // This suppresses exceptions with unexpected eof (also incorrect crc)
        MesgBroadcaster mesgBroadcaster = new MesgBroadcaster(decode);
        Listener listener = new Listener();
        FileInputStream in;

        try {
            in = new FileInputStream(fileName);
        } catch (java.io.IOException e) {
            throw new RuntimeException("Error opening file " + fileName + " [1]");
        }

        try {
            if (!decode.checkFileIntegrity((InputStream) in)) {
                throw new RuntimeException("FIT file integrity failed.");
            }
        } catch (RuntimeException e) {
            System.err.print("Exception Checking File Integrity: ");
            System.err.println(e.getMessage());
            System.err.println("Trying to continue...");
        } finally {
            try {
                in.close();
            } catch (java.io.IOException e) {
                throw new RuntimeException(e);
            }
        }

        try {
            in = new FileInputStream(fileName);
        } catch (java.io.IOException e) {
            throw new RuntimeException("Error opening file " + fileName + " [2]");
        }

        mesgBroadcaster.addListener((DeviceInfoMesgListener) listener);
        mesgBroadcaster.addListener((RecordMesgListener) listener);

        decode.addListener((DeveloperFieldDescriptionListener) listener);

        try {
            decode.read(in, mesgBroadcaster, mesgBroadcaster);
        } catch (FitRuntimeException e) {
            // If a file with 0 data size in it's header  has been encountered,
            // attempt to keep processing the file
            if (decode.getInvalidFileDataSize()) {
                decode.nextFile();
                decode.read(in, mesgBroadcaster, mesgBroadcaster);
            } else {
                System.err.print("Exception decoding file: ");
                System.err.println(e.getMessage());

                try {
                    in.close();
                } catch (java.io.IOException f) {
                    throw new RuntimeException(f);
                }

                return;
            }
        }

        try {
            in.close();
        } catch (java.io.IOException e) {
            throw new RuntimeException(e);
        }

        System.out.println("Decoded FIT file " + fileName + ".");
    }

    private static class Listener implements DeviceInfoMesgListener, RecordMesgListener, DeveloperFieldDescriptionListener {

        @Override
        public void onMesg(DeviceInfoMesg mesg) {

            if (mesg.getTimestamp() != null) {
                System.out.println(mesg.getTimestamp());
            }

        }

        @Override
        public void onMesg(RecordMesg mesg) {

            System.out.println("Record:");

            printValues(mesg, RecordMesg.HeartRateFieldNum);
            printValues(mesg, RecordMesg.CadenceFieldNum);
            printValues(mesg, RecordMesg.DistanceFieldNum);
            printValues(mesg, RecordMesg.SpeedFieldNum);
            printValues(mesg, RecordMesg.AltitudeFieldNum);
            printValues(mesg, RecordMesg.TemperatureFieldNum);
            printValues(mesg, RecordMesg.TimestampFieldNum);

            printDeveloperData(mesg);
        }

        private void printDeveloperData(Mesg mesg) {
            for (DeveloperField field : mesg.getDeveloperFields()) {
                if (field.getNumValues() < 1) {
                    continue;
                }

                if (field.isDefined()) {
                    System.out.print("   " + field.getName());

                    if (field.getUnits() != null) {
                        System.out.print(" [" + field.getUnits() + "]");
                    }

                    System.out.print(": ");
                } else {
                    System.out.print("   Undefined Field: ");
                }

                System.out.print(field.getValue(0));
                for (int i = 1; i < field.getNumValues(); i++) {
                    System.out.print("," + field.getValue(i));
                }

                System.out.println();
            }
        }

        @Override
        public void onDescription(DeveloperFieldDescription desc) {
            System.out.println("New Developer Field Description");
            System.out.println("   App Id: " + desc.getApplicationId());
            System.out.println("   App Version: " + desc.getApplicationVersion());
            System.out.println("   Field Num: " + desc.getFieldDefinitionNumber());
        }

        private void printValues(Mesg mesg, int fieldNum) {
            Iterable<FieldBase> fields = mesg.getOverrideField((short) fieldNum);
            Field profileField = Factory.createField(mesg.getNum(), fieldNum);

            if (profileField == null) {
                return;
            }


            for (FieldBase field : fields)
                System.out.println(field.getValue());

        }

    }
}

